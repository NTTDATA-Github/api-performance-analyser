import http from 'k6/http';
import { check, sleep } from 'k6';
import { Trend } from 'k6/metrics';
import { htmlReport } from 'https://raw.githubusercontent.com/benc-uk/k6-reporter/2.2.0/dist/bundle.js';
import { textSummary } from 'https://jslib.k6.io/k6-summary/0.1.0/index.js';

// ----- Test Options -----
export const options = {
vus: {{vus}},
duration: '{{duration}}',
thresholds: {
http_req_duration: ['p(95)<2000'], // 95% requests under 2s
checks: ['rate>0.99'], // 99% of checks must pass
},
tags: {
template: 'dynamic-k6',
},
};

// ----- Custom Metric -----
const endpoint_duration = new Trend('endpoint_duration');

// ----- Helper Function to Parse Payload Safely -----
function parsePayload(payload) {
if (!payload || payload === 'null') return null;
try {
return JSON.parse(payload);
} catch (e) {
console.error('Failed to parse payload:', e);
return null;
}
}

// ----- Main Test -----
export default function () {
const url = '{{url}}';
const method = '{{method}}';
const payload = parsePayload('{{{payload}}}');
const headers = parsePayload('{{{headers}}}'); // Parse headers as JSON
const params = {
headers: headers,
};

const res = http.request(method, url, payload, params);
endpoint_duration.add(res.timings.duration);

// ----- Basic Checks -----
const ok = check(res, {
'status is 2xx': (r) => r.status >= 200 && r.status < 300,
'content-type is json': (r) =>
String(r.headers['Content-Type'] || '').includes('application/json'),
});

if (!ok) {
console.error(`Test failed for ${method} ${url} - Status: ${res.status}`);
}

sleep(1); // pacing between iterations
}

// ----- HTML Report -----
export function handleSummary(data) {
return {
"{{reportPath}}": htmlReport(data, { title: "k6 Dynamic Test" }),
stdout: textSummary(data, { enableColors: true }),
};
}
